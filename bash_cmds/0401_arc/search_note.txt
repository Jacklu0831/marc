arc 80/400 iters to time
5: 10min
25: 14min
100: 29min
250: 58min
based on past times, each iter adds 0.2min, everything else takes 9min
=> iter 10 + 50 + 100 + 150 + 200 + 250 = 760 => 206mins
=> set generously 4hrs for each iter search
=> 400 tasks 250iter alone takes 4.92hrs, set generously to 7hrs each because im scared


calculation for randomkv
=> iter 250 + 500 + 750 + 1000 = 2500 => 536mins
=> set generously 12hrs for each iter search



calculation for ttt
- 0.342min per iter, everything else takes 10min
- with iters 25 + 50 + 100 + 200 + 300 + 400 + 500 => 609mins
- set generously 14hrs for each iter search
- under 16 bits default lora config and 80 tasks each with 163MB => 13GB saved ttt ckpts



TODO: do experiment on lambda magnitudes



# smallgridsearch: small grid search for final performance
iter: 10, 50, 100, 150, 200, 250
lr: 1e-3, 1e-4
dropout: none, train, power
tokendropout: 0, 0.01, 0.1, 0.2
lambda: 0, 1e-2 (not sure if 1e-2 is good at all)

# randomsearchfull: randomkv search
iter: 250, 500, 750, 1000
lr: 1e-2, 1e-3

# randomsearchntoken: randomkv search
iter: 250, 500, 750, 1000
lr: 1e-2, 1e-3

# tttsearch: search up to 4 times iter for same sample number
iter: 25, 50, 100, 200, 300, 400, 500
lr: 1e-4

# tttsave: save a couple ttt ckpts, 5 runs
iter: 250
lr: 1e-4

# tttsave400: save a couple ttt ckpts for all 400 tasks, 5 runs
iter: 250
lr: 1e-4

# smallgridsearch400: small search for 400 tasks
iter: 100, 150, 200, 250
lr: 1e-3
dropout: none
tokendropout: 0.1
lambda: 0

# prefixsearch: prefix grid search
iter: 50, 100, 150, 200, 250 (within 4 hrs)
lr: 1e0, 1e-1, 1e-2
dropout: none
tokendropout: 0, 0.01, 0.1
lambda: 0 (lambda >1 makes no sense for prefixsearch)
