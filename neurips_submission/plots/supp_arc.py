import json
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from matplotlib.patches import Patch
import os


color_map_list = [
    "#000000", # 0: black
    "#0074D9", # 1: blue # correct
    "#FF4136", # 2: red
    "#2ECC40", # 3: green # correct
    "#FFDC00", # 4: yellow
    "#F012BE", # 6: fuchsia
    "#AAAAAA", # 5: grey
    "#FF851B", # 7: orange
    "#7FDBFF", # 8: teal
    "#870C25", # 9: brown
    "#ffffff", # 10: white
]


def visualize_grid(data, path, cell_size=1.0, dpi=100):
    # 1. Numeric array & dimensions
    grid = np.array(data, dtype=int)
    rows, cols = grid.shape

    # 2. Colormap
    cmap = ListedColormap(color_map_list)

    # 3. Figure sized so that
    #    width_in = cols * cell_size
    #    height_in = rows * cell_size
    fig, ax = plt.subplots(
        figsize=(cols * cell_size, rows * cell_size),
        dpi=dpi
    )

    ax.imshow(
        grid,
        cmap=cmap,
        vmin=0,
        vmax=9,
        interpolation='nearest'
    )

    # 4. Strip away axes & padding
    ax.axis('off')
    plt.subplots_adjust(left=0, right=1, top=1, bottom=0)

    # 5. Save & clean up
    fig.savefig(path, dpi=dpi)
    plt.close(fig)


def str_to_2dlist(s):
    grid = [[int(y) for y in list(row)] for row in s.split('\n')]
    grid = grid[1:] # no dim
    assert not (len(grid) == 0 or any(len(r) == 0 for r in grid))
    assert len(set(len(r) for r in grid)) == 1
    return grid


paths = [
    'encoder_decoder/outputs_eval/eval_arc_gs50_lr3e-3_dropnone_tokendrop0.1_part1_0317_noprogram_base/eval_pred_gt.json',
    'encoder_decoder/outputs_eval/eval_arc_gs100_lr3e-3_dropnone_tokendrop0.1_part1_0317_noprogram_base/eval_pred_gt.json',
    'encoder_decoder/outputs_eval/eval_arc_gs150_lr3e-3_dropnone_tokendrop0.1_part1_0317_noprogram_base/eval_pred_gt.json',
    'encoder_decoder/outputs_eval/eval_arc_gs200_lr3e-3_dropnone_tokendrop0.1_part1_0317_noprogram_base/eval_pred_gt.json',
    'encoder_decoder/outputs_eval/eval_arc_gs250_lr3e-3_dropnone_tokendrop0.1_part1_0317_noprogram_base/eval_pred_gt.json',
]

# task = '00dbd492'
# iter_to_pred = {
#     0: '2020\n00000000000222220000\n02222222220244420000\n02444444420242420000\n02444444420244420000\n02444444420222220000\n02444244420000000000\n02444444420000000000\n02444444420002222200\n02444444420002444200\n02222222220002424200\n00000000000002444200\n00000000000002222200\n00000222222200000000\n00000244444200000000\n00000244444200000000\n00000244244200000000\n00000244444200000000\n00000244444200000000\n00000222222200000000\n00000000000000000000',
#     50: '2020\n00000000000222220000\n02222222220244420000\n02444444420242420000\n02444444420244420000\n02444444420222220000\n02444244420000000000\n02444444420000000000\n02444444420002222200\n02444444420002888200\n02222222220002828200\n00000000000002888200\n00000000000002222200\n00000222222200000000\n00000244444200000000\n00000244444200000000\n00000244244200000000\n00000244444200000000\n00000244444200000000\n00000222222200000000\n00000000000000000000',
#     100: '2020\n00000000000222220000\n02222222220244420000\n02333333320242420000\n02333333320244420000\n02333333320222220000\n02333233320000000000\n02333333320000000000\n02333333320002222200\n02333333320002888200\n02222222220002828200\n00000000000002888200\n00000000000002222200\n00000222222200000000\n00000244444200000000\n00000244444200000000\n00000244244200000000\n00000244444200000000\n00000244444200000000\n00000222222200000000\n00000000000000000000',
#     150: '2020\n00000000000222220000\n02222222220288820000\n02333333320282820000\n02333333320288820000\n02333333320222220000\n02333233320000000000\n02333333320000000000\n02333333320002222200\n02333333320002888200\n02222222220002828200\n00000000000002888200\n00000000000002222200\n00000222222200000000\n00000244444200000000\n00000244444200000000\n00000244244200000000\n00000244444200000000\n00000244444200000000\n00000222222200000000\n00000000000000000000',
#     200: '2020\n00000000000222220000\n02222222220288820000\n02333333320282820000\n02333333320288820000\n02333333320222220000\n02333233320000000000\n02333333320000000000\n02333333320002222200\n02333333320002888200\n02222222220002828200\n00000000000002888200\n00000000000002222200\n00000222222200000000\n00000244444200000000\n00000244444200000000\n00000244244200000000\n00000244444200000000\n00000244444200000000\n00000222222200000000\n00000000000000000000',
# }

task = '14754a24'
iter_to_pred = {
    0: '1919\n0050052050505545005\n0550542250550422550\n5550554055055520505\n5540000500050500055\n5422550500550550500\n5525000550545005055\n0555505555442055000\n5005555000020550050\n0500000500500050505\n0000500500500500550\n0000550505050400050\n5545555500504240505\n5224000555055405555\n0045000005050555555\n5050050450055555005\n5505502240055505055\n5550555405505500550\n5555000500505050500\n0505550055500555555',
    50: '1919\n0050052050505545005\n0550542250550422550\n5550554055055520505\n5540000500050500055\n5422550500550550500\n5525000550545005055\n0555505555442055000\n5005555000020550050\n0500000500500050505\n0000500500500500550\n0000550505050400050\n5545555500504240505\n5224000555055405555\n0045000005050555555\n5050050450055555005\n5505502240055505055\n5550555405505500550\n5555000500505050500\n0505550055500555555',
    100: '1919\n0050052050502245005\n0550542250550450550\n5550554055055550505\n2240000500050500055\n5455550500550550500\n5505000550545005055\n0555505555442055000\n5005555000020550050\n0500000500500050505\n0000500500500500550\n0000550505050400050\n5545555500504240505\n5224000555055405555\n0045000005050555555\n5050050450055555005\n5505502240055505055\n5550555405505500550\n5555000500505050500\n0505550055500555555',
    150: '1919\n0050052050502245005\n0550542250550450550\n5550554055055550505\n2240000500050500055\n5455550500550550500\n5505000550545005055\n0555505555442055000\n5005555000020550050\n0500000500500050505\n0000500500500500550\n0000550505050400050\n5545555500504240505\n5224000555055405555\n0045000005050555555\n5050050450055555005\n5505502240055505055\n5550555405505500550\n5555000500505050500\n0505550055500555555',
    200: '1919\n0050052050502245005\n0550542250550450550\n5250554055055550505\n2240000500050500055\n5455550500550550500\n5505000550545005055\n0555505555442055000\n5005555000020550050\n0500000500500050505\n0000500500500500550\n0000550505050400050\n5545555500504240505\n5224000555055405555\n0045000005050555555\n5050050450055555005\n5505502240055505055\n5550555405505500550\n5555000500505050500\n0505550055500555555',
}


original_data = json.load(open(f'data/re-arc/arc_original/evaluation/{task}.json', 'r'))
assert len(original_data['test']) == 1

# demon
task_dir = f'plots/supp_arc/{task}'
os.makedirs(task_dir, exist_ok=True)
for train_i, grid in enumerate(original_data['train']):
    visualize_grid(grid['input'], f'{task_dir}/train{train_i}_input')
    visualize_grid(grid['output'], f'{task_dir}/train{train_i}_output')
visualize_grid(original_data['test'][0]['input'], f'{task_dir}/test_input')

for i, pred in iter_to_pred.items():
    visualize_grid(str_to_2dlist(pred), f'{task_dir}/pred{i}')