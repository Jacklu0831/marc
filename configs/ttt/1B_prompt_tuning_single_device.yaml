# Model Arguments
model:
  _component_: torchtune.models.llama3_2.llama3_2_1b
  prompt_tuning:
    num_virtual_tokens: 4
    num_transformer_submodules: 1
    token_dim: 2048
    inference_mode: False
    prompt_tuning_init: "RANDOM"
    prompt_tuning_init_text: "none"

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  # path: checkpoints/base/Llama-3.2-1B-Instruct/original/tokenizer.model
  path: downloaded_models/meta-llama/Llama-3.2-1B-Instruct/original/tokenizer.model
  max_seq_len: null

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: downloaded_models/meta-llama/Llama-3.2-1B-Instruct
  checkpoint_files: [
    model.safetensors,
  ]
  recipe_checkpoint: # recipe_state.pt
  output_dir: train_outputs/1114_llama1b_ttt/
  model_type: LLAMA3

# Dataset and Sampler
dataset:
   _component_: torchtune.datasets.arc_dataset
   source: data/dummy/
   train_on_input: False
   unmask_outputs: True # we'll get loss from all outputs after the first demonstration, very hacky, tokenizer & formatting specific
   cache_dir: .cache/

seed: 57
shuffle: True
batch_size: 2
save_every_n_epoch: 1

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.01
  lr: 3e-4

lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 5

loss:
  _component_: torch.nn.CrossEntropyLoss

# Training
epochs: 3
max_steps_per_epoch: null
gradient_accumulation_steps: 16
compile: False

# Logging
output_dir: train_outputs/test
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}
log_every_n_steps: 1
log_peak_memory_stats: False

# Environment
device: cuda
dtype: bf16

# Activations Memory
enable_activation_checkpointing: True
enable_activation_offloading: False

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 5
  active_steps: 2
  num_cycles: 1
